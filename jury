#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

class Jury
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection
    if options[:command] == "search"
      search_term = ask("Enter all or part of a song name to search for:")
      search_songs_for(search_term)
    elsif options[:command] == "add"
      add_song()
    elsif options[:command] == "list"
      list_songs()
    elsif options[:command] == "edit"
      if song = Song.find(options[:id])
        song.update(options)
        puts "Song #{song.id} by #{song.artist} is now named '#{song.name}'. It's in the #{song.genre.name} genre, with intensity of #{song.intensity} and focusing value of #{song.focusing}."
      else
        puts "Song #{options[:id]} couldn't be found."
      end
    else
      puts "Available commands are 'add', 'edit', 'list', and 'search.'"
    end
  end

  def list_songs()
    puts "Songs in the database:"
    puts Song.all
  end

  def search_songs_for(search_term)
    puts "Searching for: #{search_term}"
    puts Song.search(search_term)
  end

  def add_song
    error_messages = ArgumentParser.validate(options)
    options[:genre] = get_genre_from_user()
    if error_messages.empty?
      song = Song.new(options)
      song.save
      puts "A song by #{song.artist} was added, named '#{song.name}'. It's in the #{song.genre.name} genre, with intensity of #{song.intensity} and focusing value of #{song.focusing}."
    else
      puts error_messages.join(" ")
    end
  end

  def get_genre_from_user
    query = "Enter the number representing the song's genre:\n"
    genres = Genre.all
    genres.each_with_index do |genre, i|
      query << "#{i+1}. #{genre.name}\n"
    end
    genre_number = ask(query)
    if genre_number.empty?
      Genre.default
    else
      genres[genre_number.to_i - 1]
    end
  end
end

jury = Jury.new()
jury.main()

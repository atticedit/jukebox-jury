#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

class Jury
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection
    case options[:command]
    when "search"
      search_term = ask("Enter all or part of a song name to search for, then hit return.")
      search_songs_for(search_term)
    when "list"
      list_songs()
    when "add"
      add_song()
    when "edit"
      edit_song()
    when "delete"
      delete_song()
    when "report"
      print_report()
    else
    puts %|
    The commands I can help you with are 'search', 'list', add', 'edit', 'delete', and 'report'.

    Try your command again.
          |
    end
  end

  def list_songs()
    puts %|
    Songs in the database:
          |
    sleep 1 # adds 1 second delay for more satisying experience
    puts Song.all
    puts
  end

  def edit_song()
    if options[:id].nil?
      puts %|
      I\'ll need the attributes of the song you want to edit.

      Try your command again.
            |
      exit
    end
    if song = Song.find(options[:id])
      song.edit(options)
    puts %|
    I\'ve updated song #{song.id}, \"#{song.name}\" by #{song.artist}, in the database.
    It's #{song.genre.name.downcase} with an intensity of #{song.intensity} and a focusing value of #{song.focusing}.
          |
    else
    puts %|
    Hmm. Song #{options[:id]} couldn't be found.
          |
    end
  end

  def search_songs_for(search_term)
    song_found = Song.search(search_term)
    if song_found.nil? or song_found.empty?
      puts %|
    I don\'t find any songs matching \"#{search_term}\" in the database.
            |
    else
      puts %|
    Searching for \"#{search_term}\", I found:
            |
      puts song_found
      puts
    end
  end

  def add_song
    error_messages = ArgumentParser.validate(options)
    options[:genre] = get_genre_from_user()
    if error_messages.empty?
      song = Song.new(options)
      song.save
      puts %|
    I added a song by #{song.artist} named \"#{song.name}\".
    It's #{song.genre.name.downcase} with an intensity of #{song.intensity} and a focusing value of #{song.focusing}.
            |
    else
      puts %|
    #{error_messages.join("\n    ")}

    Try your command again.
            |
    end
  end

  def get_genre_from_user
    query = "Enter the number representing the song's genre, and hit return:
      "
    genres = Genre.all
    genres.each_with_index do |genre, i|
      query << "
    #{i+1}. #{genre.name}"
    end
    genre_number = ask(query)
    if genre_number.empty?
      Genre.default
    else
      genres[genre_number.to_i - 1]
    end
  end

  def delete_song
    database = Environment.database_connection
    if options[:name].nil? or options[:name].empty?
      puts %|
      I\'ll need the name of the song you want to delete.

      Try your command again.
            |
    else
      name = options[:name]
      song = Song.search(options[:name])[0]
      if song.nil?
      puts %|
      I don\'t find any songs named \"#{name}\" in the database.
            |
        exit
      end
      query =
    "I\'ve found a song named \"#{song.name}\" by #{song.artist}.
    It's #{song.genre.name.downcase} with an intensity of #{song.intensity} and a focusing value of #{song.focusing}.

    Are you sure you want to delete \"#{song.name}\"?
    Enter 'Y' for yes or 'N' for no, then hit return."
      verification = ask(query)
      if verification.downcase == "y"
        database.execute("delete from songs where id = #{song.id}")
      puts %|
    I\'ve deleted \"#{song.name}\" from the database.
            |
      elsif verification.downcase == "n"
      puts %|
    Okay.

    \"#{song.name}\" wasn\'t deleted, and remains in the database.
            |
      else
      puts %|
    Sorry, I don't understand what you mean by \'#{verification}\'.
    I was looking for 'Y' or 'N'.

    \"#{song.name}\" wasn\'t deleted, and remains in the database.
            |
      end
    end
  end

  def print_report
    puts %|
    I can analyze the types of songs you marked as best for concentration.
    My report will show the combinations of genre and intensity you concentrate to best.
          |
    query =
    "Before I start, do you have any guesses?
    Enter 'Y' for yes or 'N' for no, then hit return."
    response = ask(query).downcase
    if response == "y"
      guess = ask("What do you think is your best combination of genre and intensity for concentration?")
      puts %|
    That's an interesting guess. Let's see if you're right.
            |
    elsif response == "n"
      puts %|
    In that case, I'll just tell you.
            |
    else
      puts %|
    Since I was looking for 'Y' or 'N', I'll take that as a no.

    I'll just tell you.
            |
    end
    sleep 1 # adds 1 second delay for more satisying experience
    puts "                     [dramatic pause]"
    sleep 2 # adds 1 second delay for dramatic pause
    puts %|
    You concentrate best to these types of music:

          |
    database = Environment.database_connection
    database.results_as_hash = true
    results = database.execute("SELECT genres.name, intensity, count(*) AS num_rows FROM songs INNER JOIN genres ON songs.genre_id = genres.id WHERE focusing = 1 GROUP BY genre_id, intensity ORDER BY num_rows DESC LIMIT 7")
    results.map do |row_hash|
      name = row_hash["name"]
      intensity = row_hash["intensity"]
      num_rows = row_hash["num_rows"]
      puts %|
#{name} with an intensity level of #{intensity}    -----    you currently have #{num_rows} of this combination
            |
    end
    puts
  end
end

jury = Jury.new()
jury.main()
